{"version":3,"file":"static/js/247.c19c4e20.chunk.js","mappings":"0OA8DA,UAxDa,WACT,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACA,GAA0BN,EAAAA,EAAAA,UAAS,MAAnC,eAAOO,EAAP,KAAcC,EAAd,KAEMC,EAAY,oEA2BlB,OAxBAC,EAAAA,EAAAA,YAAU,WAAM,wCACZ,oGAEQF,EAAS,MACTJ,GAAW,GACXE,GAAa,GAJrB,UAKoCK,EAAAA,EAAAA,IAAQb,GAL5C,WAKcc,EALd,QAM2BC,OAN3B,wBAOYT,GAAW,GAPvB,2BAUQF,EAAQU,GAVhB,kDAaQJ,EAASC,GAbjB,yBAgBQH,GAAa,GAhBrB,8EADY,uBAAC,WAAD,wBAqBZQ,EACH,GAAE,CAAChB,KAGA,4BACMK,IACE,SAAC,KAAD,UACKF,EAAKc,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,QAASC,EAA7B,EAA6BA,aAA7B,OACN,UAAC,KAAD,YACI,SAAC,KAAD,CAAUC,IAAKD,EAAY,yCAAqCA,GAlC9D,4FAkCkGE,IAAG,UAAKL,EAAL,gBACvG,UAAC,KAAD,YACI,SAAC,KAAD,UAAYA,KACZ,0BAAG,SAAC,KAAD,UAAU,eAAqB,IAAEC,UAJ5BC,EADV,MAWjBf,IAAW,uBAzCF,6CA0CTI,IAAS,uBAAIA,IACbF,IAAa,SAAC,IAAD,MAGzB,C,gNC1DYiB,EAAWC,EAAAA,GAAAA,GAAH,6HAMRC,EAAYD,EAAAA,GAAAA,GAAH,iKASTE,EAAYF,EAAAA,GAAAA,IAAH,iDAITG,EAAWH,EAAAA,GAAAA,IAAH,kIAQRI,EAAYJ,EAAAA,GAAAA,EAAH,uEAKTK,EAAWL,EAAAA,GAAAA,KAAH,8C,+LChCrBM,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,QAAyB,CACrBC,cAAe,6NACfC,OAAQ,oBAGL,IAAMC,EAAgB,mCAAG,oGACLH,EAAAA,EAAAA,IAAU,qCADL,cACtBI,EADsB,yBAErBA,EAASC,KAAKC,SAFO,2CAAH,qDAKhBC,EAAe,mCAAG,WAAMC,GAAN,uFACJR,EAAAA,EAAAA,IAAU,eAAgB,CAC7CS,OAAQ,CACJD,MAAAA,EACAE,eAAe,EACfC,SAAU,QACVC,KAAM,KANa,cACrBR,EADqB,yBASpBA,EAASC,KAAKC,SATM,2CAAH,sDAYfO,EAAY,mCAAG,WAAM5C,GAAN,uFACD+B,EAAAA,EAAAA,IAAA,gBAAmB/B,EAAnB,oBADC,cAClBmC,EADkB,yBAEjBA,EAASC,MAFQ,2CAAH,sDAKZS,EAAU,mCAAG,WAAM7C,GAAN,uFACC+B,EAAAA,EAAAA,IAAA,gBAAmB/B,EAAnB,mCADD,cAChBmC,EADgB,yBAEfA,EAASC,KAAKC,SAFC,2CAAH,sDAKVxB,EAAO,mCAAC,WAAMb,GAAN,uFACM+B,EAAAA,EAAAA,IAAA,gBAAmB/B,EAAnB,4BADN,cACXmC,EADW,yBAEVA,EAASC,KAAKjC,MAFJ,2CAAD,qD","sources":["components/Cast/Cast.jsx","components/Cast/Cast.styled.js","helpers/api.js"],"sourcesContent":["import { Loader } from \"components/Loader/Loader\";\nimport { getCast } from \"helpers/api\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ActorCard, ActorImg, ActorInfo, ActorName, BoldText, CastList} from \"./Cast.styled\";\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState([]);\n    const [isEmpty, setIsEmpty] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const DEFAULT_ACTOR_IMG = \"https://t4.ftcdn.net/jpg/03/46/93/61/360_F_346936114_RaxE6OQogebgAWTalE1myseY1Hbb5qPM.jpg\";\n    const ERROR_MSG = \"Something went wrong with loading a cast. Try to reload the page!\";\n    const EMPTY_MSG = \"There is not information about actors...\";\n\n    useEffect(() => {\n        async function getListOfActors() {\n            try {\n                setError(null);\n                setIsEmpty(false);\n                setIsLoading(true);\n                const listOfReviews = await getCast(movieId);\n                if (!listOfReviews.length) {\n                    setIsEmpty(true);\n                    return;\n                }\n                setCast(listOfReviews);\n            }\n            catch {\n                setError(ERROR_MSG);\n            }\n            finally {\n                setIsLoading(false);\n            }\n\n        };\n        getListOfActors();\n    }, [movieId]);\n\n    return (\n        <div>\n            {!isEmpty &&\n                <CastList>\n                    {cast.map(({ name, character, cast_id, profile_path }) => (\n                        <ActorCard key={cast_id}>\n                            <ActorImg src={profile_path ? `https://image.tmdb.org/t/p/w500${profile_path}` : DEFAULT_ACTOR_IMG} alt={`${name}'s avatar`} />\n                            <ActorInfo>\n                                <ActorName>{name}</ActorName>\n                                <p><BoldText>Character:</BoldText> {character}</p>\n                            </ActorInfo>\n                        </ActorCard>\n                    ))}\n                </CastList>\n            }\n            {isEmpty && <p>{EMPTY_MSG}</p>}\n            {error && <p>{error}</p>}\n            {isLoading && <Loader />}\n        </div>\n    );\n};\n\nexport default Cast;","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  grid-gap: 20px;\n`;\n\nexport const ActorCard = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border: 1px solid #ddd;\n  padding: 20px;\n  border-radius: 8px;\n`;\n\nexport const ActorInfo = styled.div`\n    text-align: center;\n`;\n\nexport const ActorImg = styled.img`\n  width: 250px;\n  height: 250px;\n  border-radius: 50%;\n  object-fit: contain;\n  margin-bottom: 10px;\n`;\n\nexport const ActorName = styled.p`\n    margin-bottom: 5px;\n    font-size: 20px;\n`;\n\nexport const BoldText = styled.span`\n    font-weight: 600;\n`;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.headers = {\n    Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkZWY1MTFhNDkyM2NiMzYzZWE1MGQxYmY2NDRkOWQ4MSIsInN1YiI6IjY0OTJjZDUxNDNjZDU0MDBjODFhZjQ3MyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.3ZoWbX-qb3V6pyGWC-GdfRKa5qk6kiHeWeSt9uswZNE',\n    accept: 'application/json'\n};\n \nexport const getTrendingFilms = async () => {\n    const response = await axios.get('trending/movie/day?language=en-US');\n    return response.data.results;\n};\n\nexport const getFilmsByQuery = async query => {\n    const response = await axios.get('search/movie', {\n        params: {\n            query,\n            include_adult: false,\n            language: 'en-US',\n            page: 1,\n        }\n    });\n    return response.data.results;\n};\n\nexport const getMovieInfo = async movieId => {\n    const response = await axios.get(`movie/${movieId}?language=en-US`);\n    return response.data;\n};\n\nexport const getReviews = async movieId => {\n    const response = await axios.get(`movie/${movieId}/reviews?language=en-US&page=1`);\n    return response.data.results;\n};\n\nexport const getCast=async movieId => {\n    const response = await axios.get(`movie/${movieId}/credits?language=en-US`);\n    return response.data.cast;\n};"],"names":["movieId","useParams","useState","cast","setCast","isEmpty","setIsEmpty","isLoading","setIsLoading","error","setError","ERROR_MSG","useEffect","getCast","listOfReviews","length","getListOfActors","map","name","character","cast_id","profile_path","src","alt","CastList","styled","ActorCard","ActorInfo","ActorImg","ActorName","BoldText","axios","Authorization","accept","getTrendingFilms","response","data","results","getFilmsByQuery","query","params","include_adult","language","page","getMovieInfo","getReviews"],"sourceRoot":""}