{"version":3,"file":"static/js/415.c2a6874a.chunk.js","mappings":"+SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,QAAyB,CACrBC,cAAe,6NACfC,OAAQ,oBAGL,IAAMC,EAAgB,mCAAG,oGACLH,EAAAA,EAAAA,IAAU,qCADL,cACtBI,EADsB,yBAErBA,EAASC,KAAKC,SAFO,2CAAH,qDAKhBC,EAAe,mCAAG,WAAMC,GAAN,uFACJR,EAAAA,EAAAA,IAAU,eAAgB,CAC7CS,OAAQ,CACJD,MAAAA,EACAE,eAAe,EACfC,SAAU,QACVC,KAAM,KANa,cACrBR,EADqB,yBASpBA,EAASC,KAAKC,SATM,2CAAH,sDAYfO,EAAY,mCAAG,WAAMC,GAAN,uFACDd,EAAAA,EAAAA,IAAA,gBAAmBc,EAAnB,oBADC,cAClBV,EADkB,yBAEjBA,EAASC,MAFQ,2CAAH,sDAKZU,EAAU,mCAAG,WAAMD,GAAN,uFACCd,EAAAA,EAAAA,IAAA,gBAAmBc,EAAnB,mCADD,cAChBV,EADgB,yBAEfA,EAASC,KAAKC,SAFC,2CAAH,sDAKVU,EAAO,mCAAC,WAAMF,GAAN,uFACMd,EAAAA,EAAAA,IAAA,gBAAmBc,EAAnB,4BADN,cACXV,EADW,yBAEVA,EAASC,KAAKY,MAFJ,2CAAD,qD,kHC9BdC,EAAY,4EA+ClB,UA5Ca,WACT,OAAyBC,EAAAA,EAAAA,UAAS,IAAlC,eAAMC,EAAN,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACA,GAAkCN,EAAAA,EAAAA,WAAS,GAA3C,eAAOO,EAAP,KAAkBC,EAAlB,KAyBA,OAvBAC,EAAAA,EAAAA,YAAU,WAAM,wCACZ,oGAEQL,EAAS,MACTE,GAAW,GACXE,GAAa,GAJrB,UAKoCxB,EAAAA,EAAAA,MALpC,UAKc0B,EALd,+BAOYJ,GAAW,GAPvB,2BAUQJ,EAASQ,GAVjB,kDAaQN,EAASL,GAbjB,yBAgBQS,GAAa,GAhBrB,8EADY,uBAAC,WAAD,wBAoBZG,EACH,GAAE,KAGC,2BACKR,IAAS,uBAAIA,KACZE,IAAW,wBACRJ,EAAMW,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACP,SAAC,EAAAC,EAAD,WACI,SAAC,IAAD,CAAeC,GAAE,iBAAYF,GAA7B,SAAoCD,KADvBC,EADV,MAKdT,IAAW,uBAxCN,yDAyCLE,IAAa,SAAC,IAAD,MAGzB,C,+GC/CYU,EAAaC,EAAAA,GAAAA,GAAH,kFAKVC,GAAgBD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,qJ","sources":["helpers/api.js","pages/Home.jsx","pages/Home.styled.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.headers = {\n    Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkZWY1MTFhNDkyM2NiMzYzZWE1MGQxYmY2NDRkOWQ4MSIsInN1YiI6IjY0OTJjZDUxNDNjZDU0MDBjODFhZjQ3MyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.3ZoWbX-qb3V6pyGWC-GdfRKa5qk6kiHeWeSt9uswZNE',\n    accept: 'application/json'\n};\n \nexport const getTrendingFilms = async () => {\n    const response = await axios.get('trending/movie/day?language=en-US');\n    return response.data.results;\n};\n\nexport const getFilmsByQuery = async query => {\n    const response = await axios.get('search/movie', {\n        params: {\n            query,\n            include_adult: false,\n            language: 'en-US',\n            page: 1,\n        }\n    });\n    return response.data.results;\n};\n\nexport const getMovieInfo = async movieId => {\n    const response = await axios.get(`movie/${movieId}?language=en-US`);\n    return response.data;\n};\n\nexport const getReviews = async movieId => {\n    const response = await axios.get(`movie/${movieId}/reviews?language=en-US&page=1`);\n    return response.data.results;\n};\n\nexport const getCast=async movieId => {\n    const response = await axios.get(`movie/${movieId}/credits?language=en-US`);\n    return response.data.cast;\n};","import { getTrendingFilms } from \"helpers/api\";\nimport { useEffect, useState } from \"react\";\nimport { Loader } from \"components/Loader/Loader\";\nimport {FilmListEl, StyledNavLink } from \"./Home.styled\";\n\nconst ERROR_MSG = \"Something went wrong with loading trending films. Try to reload the page!\";\nconst EMPTY_MSG = \"There is not any information about trending films...\";\n\nconst Home = () => {\n    const[films, setFilms] = useState([]);\n    const [error, setError] = useState(null);\n    const [isEmpty, setIsEmpty] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        async function getFilms() {\n            try {\n                setError(null);\n                setIsEmpty(false);\n                setIsLoading(true);\n                const trendingFilms = await getTrendingFilms();\n                if (!trendingFilms) {\n                    setIsEmpty(true);\n                    return;\n                }\n                setFilms(trendingFilms);\n            }\n            catch {\n                setError(ERROR_MSG);\n            }\n            finally {\n                setIsLoading(false);\n            }\n        }\n        getFilms();\n    }, []);\n\n    return (\n        <div>\n            {error && <p>{error}</p>}\n            {!isEmpty && <ul>\n                {films.map(({ title, id }) => (\n                    <FilmListEl key={id}>\n                        <StyledNavLink to={`movies/${id}`}>{title}</StyledNavLink>\n                    </FilmListEl>))}\n            </ul>}\n            {isEmpty && <p>{EMPTY_MSG}</p>}\n            {isLoading && <Loader />}\n        </div>\n    )\n};\n\nexport default Home;\n\n\n\n\n","import styled from 'styled-components';\nimport {NavLink } from \"react-router-dom\";\n\nexport const FilmListEl = styled.li`\n    margin-bottom: 10px;\n    list-style:\"ðŸŽ¬\";\n`;\n\nexport const StyledNavLink = styled(NavLink)`\n    text-decoration: none;\n    color:black;\n    font-size: 18px;\n    &:hover,&:active,&:focus{\n        color:red;\n    }\n`;"],"names":["axios","Authorization","accept","getTrendingFilms","response","data","results","getFilmsByQuery","query","params","include_adult","language","page","getMovieInfo","movieId","getReviews","getCast","cast","ERROR_MSG","useState","films","setFilms","error","setError","isEmpty","setIsEmpty","isLoading","setIsLoading","useEffect","trendingFilms","getFilms","map","title","id","F","to","FilmListEl","styled","StyledNavLink","NavLink"],"sourceRoot":""}