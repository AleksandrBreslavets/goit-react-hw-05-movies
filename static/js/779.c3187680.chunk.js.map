{"version":3,"file":"static/js/779.c3187680.chunk.js","mappings":"gUAEaA,EAAWC,EAAAA,GAAAA,GAAH,6HAMRC,EAAYD,EAAAA,GAAAA,GAAH,iKASTE,EAAYF,EAAAA,GAAAA,IAAH,iDAITG,EAAWH,EAAAA,GAAAA,IAAH,kIAQRI,EAAYJ,EAAAA,GAAAA,EAAH,uEAKTK,EAAWL,EAAAA,GAAAA,KAAH,8C,0JChCRM,E,OAASN,GAAAA,GAAH,kK,iBCwDnB,EAnDgB,WACZ,IAAQO,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAkCN,EAAAA,EAAAA,WAAS,GAA3C,eAAOO,EAAP,KAAkBC,EAAlB,KACMC,EAAY,qEA0BlB,OAvBAC,EAAAA,EAAAA,YAAU,WAAM,wCACZ,oGAEQJ,EAAS,MACTF,GAAW,GACXI,GAAa,GAJrB,UAKoCG,EAAAA,EAAAA,IAAWb,GAL/C,WAKcc,EALd,QAM2BC,OAN3B,wBAOYT,GAAW,GAPvB,2BAUQF,EAAWU,GAVnB,kDAaQN,EAASG,GAbjB,yBAgBQD,GAAa,GAhBrB,8EADY,uBAAC,WAAD,wBAoBZM,EACH,GAAE,CAAChB,KAGA,4BACMK,IACE,wBACKF,EAAQc,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,WAApB,OACT,UAACrB,EAAD,YACI,0BAAG,SAAC,KAAD,UAAU,YAAkB,IAAEmB,MACjC,uBAAIC,MAFKC,EADJ,MAQpBf,IAAW,uBArCF,2CAsCTE,IAAS,uBAAIA,IACbE,IAAa,SAACY,EAAA,EAAD,MAGzB,C,+LCtDDC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,QAAyB,CACrBC,cAAe,6NACfC,OAAQ,oBAGL,IAAMC,EAAgB,mCAAG,oGACLH,EAAAA,EAAAA,IAAU,qCADL,cACtBI,EADsB,yBAErBA,EAASC,KAAKC,SAFO,2CAAH,qDAKhBC,EAAe,mCAAG,WAAMC,GAAN,uFACJR,EAAAA,EAAAA,IAAU,eAAgB,CAC7CS,OAAQ,CACJD,MAAAA,EACAE,eAAe,EACfC,SAAU,QACVC,KAAM,KANa,cACrBR,EADqB,yBASpBA,EAASC,KAAKC,SATM,2CAAH,sDAYfO,EAAY,mCAAG,WAAMnC,GAAN,uFACDsB,EAAAA,EAAAA,IAAA,gBAAmBtB,EAAnB,oBADC,cAClB0B,EADkB,yBAEjBA,EAASC,MAFQ,2CAAH,sDAKZd,EAAU,mCAAG,WAAMb,GAAN,uFACCsB,EAAAA,EAAAA,IAAA,gBAAmBtB,EAAnB,mCADD,cAChB0B,EADgB,yBAEfA,EAASC,KAAKC,SAFC,2CAAH,sDAKVQ,EAAO,mCAAC,WAAMpC,GAAN,uFACMsB,EAAAA,EAAAA,IAAA,gBAAmBtB,EAAnB,4BADN,cACX0B,EADW,yBAEVA,EAASC,KAAKU,MAFJ,2CAAD,qD","sources":["components/Cast/Cast.styled.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","helpers/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  grid-gap: 20px;\n`;\n\nexport const ActorCard = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border: 1px solid #ddd;\n  padding: 20px;\n  border-radius: 8px;\n`;\n\nexport const ActorInfo = styled.div`\n    text-align: center;\n`;\n\nexport const ActorImg = styled.img`\n  width: 250px;\n  height: 250px;\n  border-radius: 50%;\n  object-fit: contain;\n  margin-bottom: 10px;\n`;\n\nexport const ActorName = styled.p`\n    margin-bottom: 5px;\n    font-size: 20px;\n`;\n\nexport const BoldText = styled.span`\n    font-weight: 600;\n`;","import styled from 'styled-components';\n\nexport const Review = styled.li`\n    border:1px solid black;\n    padding: 5px;\n    border-radius: 10px;\n    &:not(:last-child){\n        margin-bottom: 20px;\n    }\n\n`;","import { Loader } from \"components/Loader/Loader\";\nimport { getReviews } from \"helpers/api\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\"\nimport { Review } from \"./Reviews.styled\";\nimport { BoldText } from \"components/Cast/Cast.styled\";\n\nconst Reviews = () => {\n    const { movieId } = useParams();\n    const [reviews, setReviews] = useState([]);\n    const [isEmpty, setIsEmpty] = useState(false);\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const ERROR_MSG = \"Something went wrong with loading reviews. Try to reload the page!\";\n    const EMPTY_MSG = \"There is no reviews about this film...\";\n\n    useEffect(() => {\n        async function getListOfReviews() {\n            try {\n                setError(null);\n                setIsEmpty(false);\n                setIsLoading(true);\n                const listOfReviews = await getReviews(movieId);\n                if (!listOfReviews.length) {\n                    setIsEmpty(true);\n                    return;\n                }\n                setReviews(listOfReviews);\n            }\n            catch {\n                setError(ERROR_MSG);\n            }\n            finally {\n                setIsLoading(false);\n            }\n        };\n        getListOfReviews();\n    }, [movieId]);\n       \n    return (\n        <div>\n            {!isEmpty &&\n                <ul>\n                    {reviews.map(({ author, content, created_at }) => (\n                        <Review key={created_at}>\n                            <p><BoldText>Author:</BoldText> {author}</p>\n                            <p>{content}</p>\n                        </Review>\n                    ))}\n                </ul>\n            }\n            {isEmpty && <p>{EMPTY_MSG}</p>}\n            {error && <p>{error}</p>}\n            {isLoading && <Loader />}\n        </div>\n    );\n};\n\nexport default Reviews;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.headers = {\n    Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkZWY1MTFhNDkyM2NiMzYzZWE1MGQxYmY2NDRkOWQ4MSIsInN1YiI6IjY0OTJjZDUxNDNjZDU0MDBjODFhZjQ3MyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.3ZoWbX-qb3V6pyGWC-GdfRKa5qk6kiHeWeSt9uswZNE',\n    accept: 'application/json'\n};\n \nexport const getTrendingFilms = async () => {\n    const response = await axios.get('trending/movie/day?language=en-US');\n    return response.data.results;\n};\n\nexport const getFilmsByQuery = async query => {\n    const response = await axios.get('search/movie', {\n        params: {\n            query,\n            include_adult: false,\n            language: 'en-US',\n            page: 1,\n        }\n    });\n    return response.data.results;\n};\n\nexport const getMovieInfo = async movieId => {\n    const response = await axios.get(`movie/${movieId}?language=en-US`);\n    return response.data;\n};\n\nexport const getReviews = async movieId => {\n    const response = await axios.get(`movie/${movieId}/reviews?language=en-US&page=1`);\n    return response.data.results;\n};\n\nexport const getCast=async movieId => {\n    const response = await axios.get(`movie/${movieId}/credits?language=en-US`);\n    return response.data.cast;\n};"],"names":["CastList","styled","ActorCard","ActorInfo","ActorImg","ActorName","BoldText","Review","movieId","useParams","useState","reviews","setReviews","isEmpty","setIsEmpty","error","setError","isLoading","setIsLoading","ERROR_MSG","useEffect","getReviews","listOfReviews","length","getListOfReviews","map","author","content","created_at","Loader","axios","Authorization","accept","getTrendingFilms","response","data","results","getFilmsByQuery","query","params","include_adult","language","page","getMovieInfo","getCast","cast"],"sourceRoot":""}